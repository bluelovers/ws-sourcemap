"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const extract_source_map_1 = require("extract-source-map");
const util_1 = require("./util");
class LazySourceMap {
    constructor(properties, callback) {
        let { version, sources = [], sourcesContent = [], names = [], mappings, file, sourceRoot } = util_1._toRawSourceMapJSON(properties, callback);
        this.version = version | 0;
        this.sources = sources;
        this.mappings = mappings;
        this.names = names;
        this.file = file;
        this.sourceRoot = sourceRoot;
        this.sourcesContent = sourcesContent;
    }
    /**
     * when sourceMappingURL is file path, need use callback for handle it
     */
    static fromContext(input, callback) {
        let data = extract_source_map_1.parseComment(input);
        let { value } = data;
        if (data.type !== extract_source_map_1.EnumSourceMapCommentType.BASE64) {
            value = callback(data.file);
        }
        return new this(value);
    }
    static fromBase64(value) {
        return new this(Buffer.from(value, 'base64').toString());
    }
    static from(value) {
        return new this(value);
    }
    toJSON() {
        let { version, sources, sourcesContent, names, mappings, file, sourceRoot } = this;
        return {
            version,
            sources,
            names,
            mappings,
            file,
            sourceRoot,
            sourcesContent,
        };
    }
    toString() {
        return JSON.stringify(this.toJSON());
    }
    toBase64() {
        return Buffer.from(this.toString()).toString('base64');
    }
    toUrl() {
        return `data:application/json;base64,${this.toBase64()}`;
    }
    toComment({ multiline, flag, } = {}) {
        let prefix = flag ? '@' : '#';
        let value = `${prefix} sourceMappingURL=${this.toUrl()}`;
        if (multiline) {
            return `/*${value} */`;
        }
        return `//${value}`;
    }
}
exports.LazySourceMap = LazySourceMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJEQUE0RTtBQUM1RSxpQ0FBNkM7QUFJN0MsTUFBYSxhQUFhO0lBdUN6QixZQUFZLFVBQStCLEVBQUUsUUFBK0M7UUFFM0YsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLGNBQWMsR0FBRyxFQUFFLEVBQUUsS0FBSyxHQUFHLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxHQUFHLDBCQUFtQixDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV2SSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7SUFDdEMsQ0FBQztJQXJDRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxXQUFXLENBQXFDLEtBQWEsRUFBRSxRQUE4QjtRQUVuRyxJQUFJLElBQUksR0FBRyxpQ0FBWSxDQUFJLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFckIsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLDZDQUF3QixDQUFDLE1BQU0sRUFDakQ7WUFDQyxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUMzQjtRQUVELE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBYTtRQUU5QixPQUFPLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDekQsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBMEI7UUFFckMsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN2QixDQUFDO0lBZUQsTUFBTTtRQUVMLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFbkYsT0FBTztZQUNOLE9BQU87WUFDUCxPQUFPO1lBQ1AsS0FBSztZQUNMLFFBQVE7WUFDUixJQUFJO1lBQ0osVUFBVTtZQUNWLGNBQWM7U0FDZCxDQUFBO0lBQ0YsQ0FBQztJQUVELFFBQVE7UUFFUCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELFFBQVE7UUFFUCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3ZELENBQUM7SUFFRCxLQUFLO1FBRUosT0FBTyxnQ0FBZ0MsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUE7SUFDekQsQ0FBQztJQUVELFNBQVMsQ0FBQyxFQUNULFNBQVMsRUFDVCxJQUFJLE1BSUQsRUFBRTtRQUVMLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDOUIsSUFBSSxLQUFLLEdBQUcsR0FBRyxNQUFNLHFCQUFxQixJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztRQUV6RCxJQUFJLFNBQVMsRUFDYjtZQUNDLE9BQU8sS0FBSyxLQUFLLEtBQUssQ0FBQTtTQUN0QjtRQUVELE9BQU8sS0FBSyxLQUFLLEVBQUUsQ0FBQTtJQUNwQixDQUFDO0NBRUQ7QUFyR0Qsc0NBcUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVJhd1NvdXJjZU1hcEpTT04sIElSYXdTb3VyY2VNYXBKU09OUnVudGltZSwgSUxhenlTb3VyY2VNYXBJbnB1dCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgcGFyc2VDb21tZW50LCBFbnVtU291cmNlTWFwQ29tbWVudFR5cGUgfSBmcm9tICdleHRyYWN0LXNvdXJjZS1tYXAnO1xuaW1wb3J0IHsgX3RvUmF3U291cmNlTWFwSlNPTiB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCB7IElMYXp5U291cmNlTWFwSW5wdXQsIElSYXdTb3VyY2VNYXBKU09OLCBJUmF3U291cmNlTWFwSlNPTlJ1bnRpbWUgfVxuXG5leHBvcnQgY2xhc3MgTGF6eVNvdXJjZU1hcCBpbXBsZW1lbnRzIElSYXdTb3VyY2VNYXBKU09OXG57XG5cdHJlYWRvbmx5IHZlcnNpb246IG51bWJlcjtcblx0cmVhZG9ubHkgc291cmNlczogc3RyaW5nW107XG5cdHJlYWRvbmx5IG1hcHBpbmdzOiBzdHJpbmc7XG5cblx0cmVhZG9ubHkgbmFtZXM6IHN0cmluZ1tdO1xuXG5cdHJlYWRvbmx5IGZpbGU6IHN0cmluZztcblxuXHRyZWFkb25seSBzb3VyY2VSb290OiBzdHJpbmc7XG5cdHJlYWRvbmx5IHNvdXJjZXNDb250ZW50OiBzdHJpbmdbXTtcblxuXHQvKipcblx0ICogd2hlbiBzb3VyY2VNYXBwaW5nVVJMIGlzIGZpbGUgcGF0aCwgbmVlZCB1c2UgY2FsbGJhY2sgZm9yIGhhbmRsZSBpdFxuXHQgKi9cblx0c3RhdGljIGZyb21Db250ZXh0PFQgZXh0ZW5kcyBJUmF3U291cmNlTWFwSlNPTlJ1bnRpbWU+KGlucHV0OiBzdHJpbmcsIGNhbGxiYWNrPzogKGRhdGE6IHN0cmluZykgPT4gVClcblx0e1xuXHRcdGxldCBkYXRhID0gcGFyc2VDb21tZW50PFQ+KGlucHV0KTtcblx0XHRsZXQgeyB2YWx1ZSB9ID0gZGF0YTtcblxuXHRcdGlmIChkYXRhLnR5cGUgIT09IEVudW1Tb3VyY2VNYXBDb21tZW50VHlwZS5CQVNFNjQpXG5cdFx0e1xuXHRcdFx0dmFsdWUgPSBjYWxsYmFjayhkYXRhLmZpbGUpXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyB0aGlzKHZhbHVlKVxuXHR9XG5cblx0c3RhdGljIGZyb21CYXNlNjQodmFsdWU6IHN0cmluZylcblx0e1xuXHRcdHJldHVybiBuZXcgdGhpcyhCdWZmZXIuZnJvbSh2YWx1ZSwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCkpXG5cdH1cblxuXHRzdGF0aWMgZnJvbSh2YWx1ZTogSUxhenlTb3VyY2VNYXBJbnB1dClcblx0e1xuXHRcdHJldHVybiBuZXcgdGhpcyh2YWx1ZSlcblx0fVxuXG5cdGNvbnN0cnVjdG9yKHByb3BlcnRpZXM6IElMYXp5U291cmNlTWFwSW5wdXQsIGNhbGxiYWNrPzogPFQ+KGlucHV0OiBUKSA9PiBJTGF6eVNvdXJjZU1hcElucHV0KVxuXHR7XG5cdFx0bGV0IHsgdmVyc2lvbiwgc291cmNlcyA9IFtdLCBzb3VyY2VzQ29udGVudCA9IFtdLCBuYW1lcyA9IFtdLCBtYXBwaW5ncywgZmlsZSwgc291cmNlUm9vdCB9ID0gX3RvUmF3U291cmNlTWFwSlNPTihwcm9wZXJ0aWVzLCBjYWxsYmFjayk7XG5cblx0XHR0aGlzLnZlcnNpb24gPSB2ZXJzaW9uIHwgMDtcblx0XHR0aGlzLnNvdXJjZXMgPSBzb3VyY2VzO1xuXHRcdHRoaXMubWFwcGluZ3MgPSBtYXBwaW5ncztcblx0XHR0aGlzLm5hbWVzID0gbmFtZXM7XG5cdFx0dGhpcy5maWxlID0gZmlsZTtcblx0XHR0aGlzLnNvdXJjZVJvb3QgPSBzb3VyY2VSb290O1xuXHRcdHRoaXMuc291cmNlc0NvbnRlbnQgPSBzb3VyY2VzQ29udGVudDtcblx0fVxuXG5cdHRvSlNPTigpOiBJUmF3U291cmNlTWFwSlNPTlxuXHR7XG5cdFx0bGV0IHsgdmVyc2lvbiwgc291cmNlcywgc291cmNlc0NvbnRlbnQsIG5hbWVzLCBtYXBwaW5ncywgZmlsZSwgc291cmNlUm9vdCB9ID0gdGhpcztcblxuXHRcdHJldHVybiB7XG5cdFx0XHR2ZXJzaW9uLFxuXHRcdFx0c291cmNlcyxcblx0XHRcdG5hbWVzLFxuXHRcdFx0bWFwcGluZ3MsXG5cdFx0XHRmaWxlLFxuXHRcdFx0c291cmNlUm9vdCxcblx0XHRcdHNvdXJjZXNDb250ZW50LFxuXHRcdH1cblx0fVxuXG5cdHRvU3RyaW5nKCk6IHN0cmluZ1xuXHR7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpO1xuXHR9XG5cblx0dG9CYXNlNjQoKVxuXHR7XG5cdFx0cmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMudG9TdHJpbmcoKSkudG9TdHJpbmcoJ2Jhc2U2NCcpXG5cdH1cblxuXHR0b1VybCgpXG5cdHtcblx0XHRyZXR1cm4gYGRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJHt0aGlzLnRvQmFzZTY0KCl9YFxuXHR9XG5cblx0dG9Db21tZW50KHtcblx0XHRtdWx0aWxpbmUsXG5cdFx0ZmxhZyxcblx0fToge1xuXHRcdG11bHRpbGluZT86IGJvb2xlYW4sXG5cdFx0ZmxhZz86IGJvb2xlYW4sXG5cdH0gPSB7fSlcblx0e1xuXHRcdGxldCBwcmVmaXggPSBmbGFnID8gJ0AnIDogJyMnO1xuXHRcdGxldCB2YWx1ZSA9IGAke3ByZWZpeH0gc291cmNlTWFwcGluZ1VSTD0ke3RoaXMudG9VcmwoKX1gO1xuXG5cdFx0aWYgKG11bHRpbGluZSlcblx0XHR7XG5cdFx0XHRyZXR1cm4gYC8qJHt2YWx1ZX0gKi9gXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGAvLyR7dmFsdWV9YFxuXHR9XG5cbn1cbiJdfQ==