"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const get_source_map_comment_1 = require("get-source-map-comment");
const util_1 = require("./util");
class LazySourceMap {
    constructor(properties, callback) {
        let { version, sources = [], sourcesContent = [], names = [], mappings, file, sourceRoot } = util_1._toRawSourceMapJSON(properties, callback);
        this.version = version | 0;
        this.sources = sources;
        this.mappings = mappings;
        this.names = names;
        this.file = file;
        this.sourceRoot = sourceRoot;
        this.sourcesContent = sourcesContent;
    }
    /**
     * when sourceMappingURL is file path, need use callback for handle it
     */
    static fromContext(input, callback) {
        let data = get_source_map_comment_1.parseComment(input);
        let { value } = data;
        if (data.type !== get_source_map_comment_1.EnumSourceMapCommentType.BASE64) {
            value = callback(data.file);
        }
        return new this(value);
    }
    static fromBase64(value) {
        return new this(Buffer.from(value, 'base64').toString());
    }
    static from(value) {
        return new this(value);
    }
    toJSON() {
        let { version, sources, sourcesContent, names, mappings, file, sourceRoot } = this;
        return {
            version,
            sources,
            names,
            mappings,
            file,
            sourceRoot,
            sourcesContent,
        };
    }
    toString() {
        return JSON.stringify(this.toJSON());
    }
    toBase64() {
        return Buffer.from(this.toString()).toString('base64');
    }
    toUrl() {
        return `data:application/json;base64,${this.toBase64()}`;
    }
    toComment({ multiline, flag, } = {}) {
        let prefix = flag ? '@' : '#';
        let value = `${prefix} sourceMappingURL=${this.toUrl()}`;
        if (multiline) {
            return `/*${value} */`;
        }
        return `//${value}`;
    }
}
exports.LazySourceMap = LazySourceMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLG1FQUFnRjtBQUNoRixpQ0FBNkM7QUFJN0MsTUFBYSxhQUFhO0lBdUN6QixZQUFZLFVBQStCLEVBQUUsUUFBK0M7UUFFM0YsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFFLGNBQWMsR0FBRyxFQUFFLEVBQUUsS0FBSyxHQUFHLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxHQUFHLDBCQUFtQixDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV2SSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7SUFDdEMsQ0FBQztJQXJDRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxXQUFXLENBQXFDLEtBQWEsRUFBRSxRQUE4QjtRQUVuRyxJQUFJLElBQUksR0FBRyxxQ0FBWSxDQUFJLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFckIsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLGlEQUF3QixDQUFDLE1BQU0sRUFDakQ7WUFDQyxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUMzQjtRQUVELE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBYTtRQUU5QixPQUFPLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7SUFDekQsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBMEI7UUFFckMsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN2QixDQUFDO0lBZUQsTUFBTTtRQUVMLElBQUksRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFbkYsT0FBTztZQUNOLE9BQU87WUFDUCxPQUFPO1lBQ1AsS0FBSztZQUNMLFFBQVE7WUFDUixJQUFJO1lBQ0osVUFBVTtZQUNWLGNBQWM7U0FDZCxDQUFBO0lBQ0YsQ0FBQztJQUVELFFBQVE7UUFFUCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELFFBQVE7UUFFUCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ3ZELENBQUM7SUFFRCxLQUFLO1FBRUosT0FBTyxnQ0FBZ0MsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUE7SUFDekQsQ0FBQztJQUVELFNBQVMsQ0FBQyxFQUNULFNBQVMsRUFDVCxJQUFJLE1BSUQsRUFBRTtRQUVMLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDOUIsSUFBSSxLQUFLLEdBQUcsR0FBRyxNQUFNLHFCQUFxQixJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztRQUV6RCxJQUFJLFNBQVMsRUFDYjtZQUNDLE9BQU8sS0FBSyxLQUFLLEtBQUssQ0FBQTtTQUN0QjtRQUVELE9BQU8sS0FBSyxLQUFLLEVBQUUsQ0FBQTtJQUNwQixDQUFDO0NBRUQ7QUFyR0Qsc0NBcUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVJhd1NvdXJjZU1hcEpTT04sIElSYXdTb3VyY2VNYXBKU09OUnVudGltZSwgSUxhenlTb3VyY2VNYXBJbnB1dCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgcGFyc2VDb21tZW50LCBFbnVtU291cmNlTWFwQ29tbWVudFR5cGUgfSBmcm9tICdnZXQtc291cmNlLW1hcC1jb21tZW50JztcbmltcG9ydCB7IF90b1Jhd1NvdXJjZU1hcEpTT04gfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgeyBJTGF6eVNvdXJjZU1hcElucHV0LCBJUmF3U291cmNlTWFwSlNPTiwgSVJhd1NvdXJjZU1hcEpTT05SdW50aW1lIH1cblxuZXhwb3J0IGNsYXNzIExhenlTb3VyY2VNYXAgaW1wbGVtZW50cyBJUmF3U291cmNlTWFwSlNPTlxue1xuXHRyZWFkb25seSB2ZXJzaW9uOiBudW1iZXI7XG5cdHJlYWRvbmx5IHNvdXJjZXM6IHN0cmluZ1tdO1xuXHRyZWFkb25seSBtYXBwaW5nczogc3RyaW5nO1xuXG5cdHJlYWRvbmx5IG5hbWVzOiBzdHJpbmdbXTtcblxuXHRyZWFkb25seSBmaWxlOiBzdHJpbmc7XG5cblx0cmVhZG9ubHkgc291cmNlUm9vdDogc3RyaW5nO1xuXHRyZWFkb25seSBzb3VyY2VzQ29udGVudDogc3RyaW5nW107XG5cblx0LyoqXG5cdCAqIHdoZW4gc291cmNlTWFwcGluZ1VSTCBpcyBmaWxlIHBhdGgsIG5lZWQgdXNlIGNhbGxiYWNrIGZvciBoYW5kbGUgaXRcblx0ICovXG5cdHN0YXRpYyBmcm9tQ29udGV4dDxUIGV4dGVuZHMgSVJhd1NvdXJjZU1hcEpTT05SdW50aW1lPihpbnB1dDogc3RyaW5nLCBjYWxsYmFjaz86IChkYXRhOiBzdHJpbmcpID0+IFQpXG5cdHtcblx0XHRsZXQgZGF0YSA9IHBhcnNlQ29tbWVudDxUPihpbnB1dCk7XG5cdFx0bGV0IHsgdmFsdWUgfSA9IGRhdGE7XG5cblx0XHRpZiAoZGF0YS50eXBlICE9PSBFbnVtU291cmNlTWFwQ29tbWVudFR5cGUuQkFTRTY0KVxuXHRcdHtcblx0XHRcdHZhbHVlID0gY2FsbGJhY2soZGF0YS5maWxlKVxuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgdGhpcyh2YWx1ZSlcblx0fVxuXG5cdHN0YXRpYyBmcm9tQmFzZTY0KHZhbHVlOiBzdHJpbmcpXG5cdHtcblx0XHRyZXR1cm4gbmV3IHRoaXMoQnVmZmVyLmZyb20odmFsdWUsICdiYXNlNjQnKS50b1N0cmluZygpKVxuXHR9XG5cblx0c3RhdGljIGZyb20odmFsdWU6IElMYXp5U291cmNlTWFwSW5wdXQpXG5cdHtcblx0XHRyZXR1cm4gbmV3IHRoaXModmFsdWUpXG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzOiBJTGF6eVNvdXJjZU1hcElucHV0LCBjYWxsYmFjaz86IDxUPihpbnB1dDogVCkgPT4gSUxhenlTb3VyY2VNYXBJbnB1dClcblx0e1xuXHRcdGxldCB7IHZlcnNpb24sIHNvdXJjZXMgPSBbXSwgc291cmNlc0NvbnRlbnQgPSBbXSwgbmFtZXMgPSBbXSwgbWFwcGluZ3MsIGZpbGUsIHNvdXJjZVJvb3QgfSA9IF90b1Jhd1NvdXJjZU1hcEpTT04ocHJvcGVydGllcywgY2FsbGJhY2spO1xuXG5cdFx0dGhpcy52ZXJzaW9uID0gdmVyc2lvbiB8IDA7XG5cdFx0dGhpcy5zb3VyY2VzID0gc291cmNlcztcblx0XHR0aGlzLm1hcHBpbmdzID0gbWFwcGluZ3M7XG5cdFx0dGhpcy5uYW1lcyA9IG5hbWVzO1xuXHRcdHRoaXMuZmlsZSA9IGZpbGU7XG5cdFx0dGhpcy5zb3VyY2VSb290ID0gc291cmNlUm9vdDtcblx0XHR0aGlzLnNvdXJjZXNDb250ZW50ID0gc291cmNlc0NvbnRlbnQ7XG5cdH1cblxuXHR0b0pTT04oKTogSVJhd1NvdXJjZU1hcEpTT05cblx0e1xuXHRcdGxldCB7IHZlcnNpb24sIHNvdXJjZXMsIHNvdXJjZXNDb250ZW50LCBuYW1lcywgbWFwcGluZ3MsIGZpbGUsIHNvdXJjZVJvb3QgfSA9IHRoaXM7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dmVyc2lvbixcblx0XHRcdHNvdXJjZXMsXG5cdFx0XHRuYW1lcyxcblx0XHRcdG1hcHBpbmdzLFxuXHRcdFx0ZmlsZSxcblx0XHRcdHNvdXJjZVJvb3QsXG5cdFx0XHRzb3VyY2VzQ29udGVudCxcblx0XHR9XG5cdH1cblxuXHR0b1N0cmluZygpOiBzdHJpbmdcblx0e1xuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLnRvSlNPTigpKTtcblx0fVxuXG5cdHRvQmFzZTY0KClcblx0e1xuXHRcdHJldHVybiBCdWZmZXIuZnJvbSh0aGlzLnRvU3RyaW5nKCkpLnRvU3RyaW5nKCdiYXNlNjQnKVxuXHR9XG5cblx0dG9VcmwoKVxuXHR7XG5cdFx0cmV0dXJuIGBkYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCR7dGhpcy50b0Jhc2U2NCgpfWBcblx0fVxuXG5cdHRvQ29tbWVudCh7XG5cdFx0bXVsdGlsaW5lLFxuXHRcdGZsYWcsXG5cdH06IHtcblx0XHRtdWx0aWxpbmU/OiBib29sZWFuLFxuXHRcdGZsYWc/OiBib29sZWFuLFxuXHR9ID0ge30pXG5cdHtcblx0XHRsZXQgcHJlZml4ID0gZmxhZyA/ICdAJyA6ICcjJztcblx0XHRsZXQgdmFsdWUgPSBgJHtwcmVmaXh9IHNvdXJjZU1hcHBpbmdVUkw9JHt0aGlzLnRvVXJsKCl9YDtcblxuXHRcdGlmIChtdWx0aWxpbmUpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIGAvKiR7dmFsdWV9ICovYFxuXHRcdH1cblxuXHRcdHJldHVybiBgLy8ke3ZhbHVlfWBcblx0fVxuXG59XG4iXX0=